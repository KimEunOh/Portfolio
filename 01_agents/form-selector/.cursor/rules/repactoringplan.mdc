---
description: 
globs: 
alwaysApply: true
---
# 모든양식_JSON_형식.json 기반 코드 리팩토링 계획

이 문서는 `모든양식_JSON_형식.json` 파일의 명세를 기준으로 프로젝트 전체 코드를 업데이트하는 계획을 설명합니다. 이 파일은 각 양식의 최종 제출 API Payload 구조를 정의하는 것으로 간주합니다.

## 0. 사전 작업: `모든양식_JSON_형식.json` 파일 수정

-   현재 파일에 포함된 `NaN` 값은 유효한 JSON 형식이 아니므로, `null`로 일괄 변경하여 Linter 오류를 해결합니다. 이는 후속 작업을 위한 필수 단계입니다.
-   일부 양식에 `dayList` 또는 `itemList`와 같은 상세 항목 리스트가 누락되어 있습니다. 기존 코드와 이전 대화 내용을 바탕으로, 이 리스트들이 최종 Payload에 포함되어야 한다고 가정하고 계획을 수립합니다. 만약 특정 양식에서 이 리스트들이 제외되어야 한다면 알려주세요.

## 1. 양식별 상세 수정 계획

각 양식에 대해 다음 파일들의 수정을 검토하고 실행합니다.

-   **HTML 템플릿 (`templates/*.html`)**: UI의 폼 필드 (`<input>`, `<select>` 등의 `name` 속성)가 최종적으로 만들어질 데이터 구조와 일관성을 갖도록 수정합니다.
-   **Pydantic 스키마 (`form_selector/schema.py`)**: LLM이 추출할 슬롯, UI에서 전송되는 데이터, 그리고 최종 API Payload를 위한 모델을 `모든양식_JSON_형식.json` 명세에 맞게 수정합니다.
-   **LLM 프롬프트 (`form_selector/prompts/*.txt`)**: 변경된 스키마에 맞춰 LLM이 정확한 정보를 추출할 수 있도록 슬롯 설명을 업데이트합니다.
-   **클라이언트 사이드 스크립트 (`static/js/*.js`)**: 사용자가 입력한 폼 데이터를 수집하여 백엔드로 전송하는 로직을 변경된 HTML 구조와 데이터 형식에 맞게 수정합니다.
-   **백엔드 서비스 로직 (`form_selector/service.py`)**: 프론트엔드에서 받은 데이터를 최종 API Payload 형식으로 가공하고, 외부 API를 호출하는 로직을 수정합니다.

### 대상 양식 목록

1.  **연차신청 양식 (Annual Leave)**
2.  **야근 식대 신청서 (Dinner Expense)**
3.  **교통비 신청서 (Transportation Expense)**
4.  **파견 및 출장 보고서 (Dispatch/Business Trip Report)**
5.  **비품/소모품 구입내역서 (Inventory Purchase Report)**
6.  **구매 품의서 (Purchase Approval Form)**
7.  **개인 경비 사용내역서 (Personal Expense Report)**
8.  **법인 카드 사용 내역서 (Corporate Card Statement)**

## 2. 작업 실행 순서

1.  **`모든양식_JSON_형식.json` 파일 수정**: `NaN` -> `null` 변경 (즉시 실행)
2.  **`form_selector/schema.py` 수정**: 모든 Pydantic 모델을 새 명세에 맞게 일괄 업데이트합니다.
3.  **`form_selector/prompts/*.txt` 수정**: 변경된 스키마에 맞춰 모든 프롬프트를 업데이트합니다.
4.  **`templates/*.html` 및 `static/js/*.js` 수정**: 각 양식의 프론트엔드 코드를 순차적으로 수정합니다.
5.  **`form_selector/service.py` 수정**: 변경된 데이터 구조를 처리하도록 백엔드 로직을 최종 수정합니다.
6.  **전체 기능 테스트 및 검증**: 수정된 모든 양식에 대해 데이터 흐름(입력 -> 추출 -> 제출)이 정상적으로 동작하는지 확인합니다.


이제 이 계획에 따라 실제 코드 수정을 시작하겠습니다. 